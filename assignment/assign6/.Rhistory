perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
######################################################################################
#b2
train <- UsCrimeData[train_index, ]
test <- UsCrimeData[-train_index, ]
y_train<-as.matrix(train$y)
UsCrimeResultantY<-y_train
X_train<-as.matrix(train[,-16])
X_train<-cbind(rep(1,nrow(X_train)),X_train)
CrimeDataToAnalyze<-X_train
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
nu0<-2
s20-SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
n<-length(y_train)
xtx_inv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
lm_solve<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(y_train)/(length(y_train)+1)*t(UsCrimeResultantY)%*%predict(lm_solve)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(y_train)/2,(nu0*s20-SigmaSquare+SSRg)/2)
beta<-mvrnorm(n=1,mu=length(y_train)/(length(y_train)+1)*lm_solve$coefficients,length(y_train)/(length(y_train)+1)*s2*xtx_inv)
Beta<-rbind(Beta,beta)
S2<-rbind(S2,s2)
}
posterior.sample<-data.frame(Beta)
colnames(posterior.sample)<-c("B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B13","B14","B15")
pos.mean<-colMeans(posterior.sample)
pos.mean<-as.matrix(pos.mean)
Y_hat<-X_test%*%pos.mean
plot(Y_hat,y_test)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
# 9.3 Crime data Question
# a. Fit a regression model
library(MASS)
# in page # 159, its clearly given the algorithm to use the MontoCarlo simulation
# using the code discussed by the professor in the class
UsCrimeData<-UScrime
# assining the values from the data to the variables or selectign the relevant columns from the US crime data
UsCrimeResultantY<-UsCrimeData$y
CrimeDataToAnalyze<-UsCrimeData[,-16]
CrimeDataToAnalyze<-cbind(rep(1,47),CrimeDataToAnalyze)
CrimeDataToAnalyze<-as.matrix(CrimeDataToAnalyze)
# loaded all the required data above
# now lets initialize and set all the parameters required to start the iterative MC process
# initialize as shown in the text book
#############################
nu0<-2
s20<-SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
##############################
n<-length(UsCrimeData$y)
xtx_inv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
lm_solve<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*t(UsCrimeResultantY)%*%predict(lm_solve)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(UsCrimeData$y)/2,(nu0*s20-SigmaSquare+SSRg)/2)
beta<-mvrnorm(n=1,mu=length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*lm_solve$coefficients,length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*s2*xtx_inv)
Beta<-rbind(Beta,beta)
S2<-rbind(S2,s2)
}
posterior.sample<-data.frame(Beta,S2)
colnames(posterior.sample)<-c("B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B13","B14","B15","Sigma2")
pos.mean<-colMeans(posterior.sample)
quantiles<-matrix(NA,15,2)
quantiles<-apply(posterior.sample,2,function(CrimeDataToAnalyze)quantile(CrimeDataToAnalyze,c(0.025,0.975)))
print(quantiles)
#quantile(posterior.sample$B0,c(0.025,0.975))
print(pos.mean)
coffecients<-lm_solve$coefficients
#print(coffecients)
print(summary(lm_solve))
###################################################################################################################
#b1
samplesize<-0.5*length(UsCrimeData$y)
## set the seed to make your partition reproductible
set.seed(123)
train_index <- sample(seq_len(length(UsCrimeData$y)), size = samplesize)
train <- UsCrimeData[train_index, ]
test <- UsCrimeData[-train_index, ]
y_train<-as.matrix(train$y)
X_train<-as.matrix(train[,-16])
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
linear_model<-lm(y_train~X_train)
B<-linear_model$coefficients
Y_hat<-X_test%*%B
plot(Y_hat,y_test)
abline(0,1)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
######################################################################################
#b2
train <- UsCrimeData[train_index, ]
test <- UsCrimeData[-train_index, ]
y_train<-as.matrix(train$y)
UsCrimeResultantY<-y_train
X_train<-as.matrix(train[,-16])
X_train<-cbind(rep(1,nrow(X_train)),X_train)
CrimeDataToAnalyze<-X_train
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
nu0<-2
s20-SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
n<-length(y_train)
xtx_inv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
lm_solve<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(y_train)/(length(y_train)+1)*t(UsCrimeResultantY)%*%predict(lm_solve)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(y_train)/2,(nu0*s20-SigmaSquare+SSRg)/2)
beta<-mvrnorm(n=1,mu=length(y_train)/(length(y_train)+1)*lm_solve$coefficients,length(y_train)/(length(y_train)+1)*s2*xtx_inv)
Beta<-rbind(Beta,beta)
S2<-rbind(S2,s2)
}
posterior.sample<-data.frame(Beta)
colnames(posterior.sample)<-c("B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B13","B14","B15")
pos.mean<-colMeans(posterior.sample)
pos.mean<-as.matrix(pos.mean)
Y_hat<-X_test%*%pos.mean
plot(Y_hat,y_test)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
# 9.3 Crime data Question
# a. Fit a regression model
library(MASS)
# in page # 159, its clearly given the algorithm to use the MontoCarlo simulation
# using the code discussed by the professor in the class
UsCrimeData<-UScrime
# assining the values from the data to the variables or selectign the relevant columns from the US crime data
UsCrimeResultantY<-UsCrimeData$y
CrimeDataToAnalyze<-UsCrimeData[,-16]
CrimeDataToAnalyze<-cbind(rep(1,47),CrimeDataToAnalyze)
CrimeDataToAnalyze<-as.matrix(CrimeDataToAnalyze)
# loaded all the required data above
# now lets initialize and set all the parameters required to start the iterative MC process
# initialize as shown in the text book
#############################
nu0<-2
s20<-SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
##############################
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(UsCrimeData$y)/2,(nu0*s20-SigmaSquare+SSRg)/2)
beta<-mvrnorm(n=1,mu=length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*linearModelingResult$coefficients,length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*s2*xtxinv)
Beta<-rbind(Beta,beta)
S2<-rbind(S2,s2)
}
posterior.sample<-data.frame(Beta,S2)
colnames(posterior.sample)<-c("B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B13","B14","B15","Sigma2")
pos.mean<-colMeans(posterior.sample)
quantiles<-matrix(NA,15,2)
quantiles<-apply(posterior.sample,2,function(CrimeDataToAnalyze)quantile(CrimeDataToAnalyze,c(0.025,0.975)))
print(quantiles)
#quantile(posterior.sample$B0,c(0.025,0.975))
print(pos.mean)
coffecients<-linearModelingResult$coefficients
#print(coffecients)
print(summary(linearModelingResult))
###################################################################################################################
#b1
samplesize<-0.5*length(UsCrimeData$y)
## set the seed to make your partition reproductible
set.seed(123)
train_index <- sample(seq_len(length(UsCrimeData$y)), size = samplesize)
train <- UsCrimeData[train_index, ]
test <- UsCrimeData[-train_index, ]
y_train<-as.matrix(train$y)
X_train<-as.matrix(train[,-16])
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
linear_model<-lm(y_train~X_train)
B<-linear_model$coefficients
Y_hat<-X_test%*%B
plot(Y_hat,y_test)
abline(0,1)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
######################################################################################
#b2
train <- UsCrimeData[train_index, ]
test <- UsCrimeData[-train_index, ]
y_train<-as.matrix(train$y)
UsCrimeResultantY<-y_train
X_train<-as.matrix(train[,-16])
X_train<-cbind(rep(1,nrow(X_train)),X_train)
CrimeDataToAnalyze<-X_train
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
nu0<-2
s20-SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
n<-length(y_train)
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(y_train)/(length(y_train)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(y_train)/2,(nu0*s20-SigmaSquare+SSRg)/2)
beta<-mvrnorm(n=1,mu=length(y_train)/(length(y_train)+1)*linearModelingResult$coefficients,length(y_train)/(length(y_train)+1)*s2*xtxinv)
Beta<-rbind(Beta,beta)
S2<-rbind(S2,s2)
}
posterior.sample<-data.frame(Beta)
colnames(posterior.sample)<-c("B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B13","B14","B15")
pos.mean<-colMeans(posterior.sample)
pos.mean<-as.matrix(pos.mean)
Y_hat<-X_test%*%pos.mean
plot(Y_hat,y_test)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
# 9.3 Crime data Question
# a. Fit a regression model
library(MASS)
# in page # 159, its clearly given the algorithm to use the MontoCarlo simulation
# using the code discussed by the professor in the class
UsCrimeData<-UScrime
# assining the values from the data to the variables or selectign the relevant columns from the US crime data
UsCrimeResultantY<-UsCrimeData$y
CrimeDataToAnalyze<-UsCrimeData[,-16]
CrimeDataToAnalyze<-cbind(rep(1,47),CrimeDataToAnalyze)
CrimeDataToAnalyze<-as.matrix(CrimeDataToAnalyze)
# loaded all the required data above
# now lets initialize and set all the parameters required to start the iterative MC process
# initialize as shown in the text book
#############################
nu0<-2
s20=1
SigmaSquare=1
SamplingIters<-10000
Beta<-S2<-NULL
##############################
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(UsCrimeData$y)/2,(nu0*s20-SigmaSquare+SSRg)/2)
beta<-mvrnorm(n=1,mu=length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*linearModelingResult$coefficients,length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*s2*xtxinv)
Beta<-rbind(Beta,beta)
S2<-rbind(S2,s2)
}
posterior.sample<-data.frame(Beta,S2)
colnames(posterior.sample)<-c("B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B13","B14","B15","Sigma2")
pos.mean<-colMeans(posterior.sample)
quantiles<-matrix(NA,15,2)
quantiles<-apply(posterior.sample,2,function(CrimeDataToAnalyze)quantile(CrimeDataToAnalyze,c(0.025,0.975)))
print(quantiles)
#quantile(posterior.sample$B0,c(0.025,0.975))
print(pos.mean)
coffecients<-linearModelingResult$coefficients
#print(coffecients)
print(summary(linearModelingResult))
###################################################################################################################
#b1
samplesize<-0.5*length(UsCrimeData$y)
## set the seed to make your partition reproductible
set.seed(123)
train_index <- sample(seq_len(length(UsCrimeData$y)), size = samplesize)
train <- UsCrimeData[train_index, ]
test <- UsCrimeData[-train_index, ]
y_train<-as.matrix(train$y)
X_train<-as.matrix(train[,-16])
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
linear_model<-lm(y_train~X_train)
B<-linear_model$coefficients
Y_hat<-X_test%*%B
plot(Y_hat,y_test)
abline(0,1)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
######################################################################################
#b2
train <- UsCrimeData[train_index, ]
test <- UsCrimeData[-train_index, ]
y_train<-as.matrix(train$y)
UsCrimeResultantY<-y_train
X_train<-as.matrix(train[,-16])
X_train<-cbind(rep(1,nrow(X_train)),X_train)
CrimeDataToAnalyze<-X_train
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
nu0<-2
s20 <- SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
n<-length(y_train)
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(y_train)/(length(y_train)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(y_train)/2,(nu0*s20-SigmaSquare+SSRg)/2)
beta<-mvrnorm(n=1,mu=length(y_train)/(length(y_train)+1)*linearModelingResult$coefficients,length(y_train)/(length(y_train)+1)*s2*xtxinv)
Beta<-rbind(Beta,beta)
S2<-rbind(S2,s2)
}
posterior.sample<-data.frame(Beta)
colnames(posterior.sample)<-c("B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B13","B14","B15")
pos.mean<-colMeans(posterior.sample)
pos.mean<-as.matrix(pos.mean)
Y_hat<-X_test%*%pos.mean
plot(Y_hat,y_test)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
# 9.3 Crime data Question
# a. Fit a regression model
library(MASS)
# in page # 159, its clearly given the algorithm to use the MontoCarlo simulation
# using the code discussed by the professor in the class
UsCrimeData<-UScrime
# assining the values from the data to the variables or selectign the relevant columns from the US crime data
UsCrimeResultantY<-UsCrimeData$y
CrimeDataToAnalyze<-UsCrimeData[,-16]
CrimeDataToAnalyze<-cbind(rep(1,47),CrimeDataToAnalyze)
CrimeDataToAnalyze<-as.matrix(CrimeDataToAnalyze)
# loaded all the required data above
# now lets initialize and set all the parameters required to start the iterative MC process
# initialize as shown in the text book
#############################
nu0<-2
s20=1
SigmaSquare=1
SamplingIters<-10000
Beta<-S2<-NULL
##############################
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
# using code shared in text book and by Professor
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(UsCrimeData$y)/2,(nu0*s20-SigmaSquare+SSRg)/2)
ValueOfbeta<-mvrnorm(n=1,mu=length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*linearModelingResult$coefficients,length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*s2*xtxinv)
Beta<-rbind(Beta,ValueOfbeta)
S2<-rbind(S2,s2)
}
########################
## Now working on the posterior samples
posteriorsample<-data.frame(Beta,S2)
colnames(posteriorsample)<-c("Beta0","Beta1","Beta2","Beta3","Beta4","Beta5","Beta6","Beta7","Beta8","Beta9","Beta10","Beta11","Beta12","Beta13","Beta14","Beta15","Sigma2")
posteriorMean<-colMeans(posteriorsample)
quantiles<-matrix(NA,15,2)
quantiles<-apply(posteriorsample,2,function(CrimeDataToAnalyze)quantile(CrimeDataToAnalyze,c(0.025,0.975)))
print(quantiles)
print(posteriorMean)
coffecients<-linearModelingResult$coefficients
print(summary(linearModelingResult))
###################################################################################################################
#Question part 2 - b - 1
SizeOfSamlple<-0.5*length(UsCrimeData$y)
## set the seed to make your partition reproductible
set.seed(145)
trainDataindexValues <- sample(seq_len(length(UsCrimeData$y)), size = SizeOfSamlple)
train <- UsCrimeData[trainDataindexValues, ]
test <- UsCrimeData[-trainDataindexValues, ]
trainValueOfY<-as.matrix(train$y)
X_train<-as.matrix(train[,-16])
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
linear_model<-lm(trainValueOfY~X_train)
B<-linear_model$coefficients
Y_hat<-X_test%*%B
plot(Y_hat,y_test)
abline(0,1)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
######################################################################################
#b2
train <- UsCrimeData[trainDataindexValues, ]
test <- UsCrimeData[-trainDataindexValues, ]
trainValueOfY<-as.matrix(train$y)
UsCrimeResultantY<-trainValueOfY
X_train<-as.matrix(train[,-16])
X_train<-cbind(rep(1,nrow(X_train)),X_train)
CrimeDataToAnalyze<-X_train
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
nu0<-2
s20 <- SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
n<-length(trainValueOfY)
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(trainValueOfY)/(length(trainValueOfY)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(trainValueOfY)/2,(nu0*s20-SigmaSquare+SSRg)/2)
ValueOfbeta<-mvrnorm(n=1,mu=length(trainValueOfY)/(length(trainValueOfY)+1)*linearModelingResult$coefficients,length(trainValueOfY)/(length(trainValueOfY)+1)*s2*xtxinv)
Beta<-rbind(Beta,ValueOfbeta)
S2<-rbind(S2,s2)
}
posteriorsample<-data.frame(Beta)
colnames(posteriorsample)<-c("Beta0","Beta1","Beta2","Beta3","Beta4","Beta5","Beta6","Beta7","Beta8","Beta9","Beta10","Beta11","Beta12","Beta13","Beta14","Beta15","Sigma2")
posteriorMean<-colMeans(posteriorsample)
posteriorMean<-as.matrix(posteriorMean)
Y_hat<-X_test%*%posteriorMean
plot(Y_hat,y_test)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
# 9.3 Crime data Question
# a. Fit a regression model
library(MASS)
# in page # 159, its clearly given the algorithm to use the MontoCarlo simulation
# using the code discussed by the professor in the class
UsCrimeData<-UScrime
# assining the values from the data to the variables or selectign the relevant columns from the US crime data
UsCrimeResultantY<-UsCrimeData$y
CrimeDataToAnalyze<-UsCrimeData[,-16]
CrimeDataToAnalyze<-cbind(rep(1,47),CrimeDataToAnalyze)
CrimeDataToAnalyze<-as.matrix(CrimeDataToAnalyze)
# loaded all the required data above
# now lets initialize and set all the parameters required to start the iterative MC process
# initialize as shown in the text book
#############################
nu0<-2
s20=1
SigmaSquare=1
SamplingIters<-10000
Beta<-S2<-NULL
##############################
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
# using code shared in text book and by Professor
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(UsCrimeData$y)/2,(nu0*s20-SigmaSquare+SSRg)/2)
ValueOfbeta<-mvrnorm(n=1,mu=length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*linearModelingResult$coefficients,length(UsCrimeData$y)/(length(UsCrimeData$y)+1)*s2*xtxinv)
Beta<-rbind(Beta,ValueOfbeta)
S2<-rbind(S2,s2)
}
########################
## Now working on the posterior samples
posteriorsample<-data.frame(Beta,S2)
colnames(posteriorsample)<-c("Beta0","Beta1","Beta2","Beta3","Beta4","Beta5","Beta6","Beta7","Beta8","Beta9","Beta10","Beta11","Beta12","Beta13","Beta14","Beta15","Sigma2")
posteriorMean<-colMeans(posteriorsample)
quantiles<-matrix(NA,15,2)
quantiles<-apply(posteriorsample,2,function(CrimeDataToAnalyze)quantile(CrimeDataToAnalyze,c(0.025,0.975)))
print(quantiles)
print(posteriorMean)
coffecients<-linearModelingResult$coefficients
print(summary(linearModelingResult))
###################################################################################################################
#Question part 2 - b - 1
SizeOfSamlple<-0.5*length(UsCrimeData$y)
## set the seed to make your partition reproductible
set.seed(145)
trainDataindexValues <- sample(seq_len(length(UsCrimeData$y)), size = SizeOfSamlple)
train <- UsCrimeData[trainDataindexValues, ]
test <- UsCrimeData[-trainDataindexValues, ]
trainValueOfY<-as.matrix(train$y)
X_train<-as.matrix(train[,-16])
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
linear_model<-lm(trainValueOfY~X_train)
B<-linear_model$coefficients
Y_hat<-X_test%*%B
plot(Y_hat,y_test)
abline(0,1)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
######################################################################################
#b2
train <- UsCrimeData[trainDataindexValues, ]
test <- UsCrimeData[-trainDataindexValues, ]
trainValueOfY<-as.matrix(train$y)
UsCrimeResultantY<-trainValueOfY
X_train<-as.matrix(train[,-16])
X_train<-cbind(rep(1,nrow(X_train)),X_train)
CrimeDataToAnalyze<-X_train
y_test<-as.matrix(test$y)
X_test<-as.matrix(test[,-16])
X_test<-cbind(rep(1,nrow(X_test)),X_test)
nu0<-2
s20 <- SigmaSquare<-1
SamplingIters<-10000
Beta<-S2<-NULL
n<-length(trainValueOfY)
xtxinv<-solve(t(CrimeDataToAnalyze)%*%CrimeDataToAnalyze)
linearModelingResult<-lm(UsCrimeResultantY~CrimeDataToAnalyze[,-1])
SSRg<-t(UsCrimeResultantY)%*%UsCrimeResultantY-length(trainValueOfY)/(length(trainValueOfY)+1)*t(UsCrimeResultantY)%*%predict(linearModelingResult)
for(i in 1:SamplingIters){
s2<-1/rgamma(n=1,nu0+length(trainValueOfY)/2,(nu0*s20-SigmaSquare+SSRg)/2)
ValueOfbeta<-mvrnorm(n=1,mu=length(trainValueOfY)/(length(trainValueOfY)+1)*linearModelingResult$coefficients,length(trainValueOfY)/(length(trainValueOfY)+1)*s2*xtxinv)
Beta<-rbind(Beta,ValueOfbeta)
S2<-rbind(S2,s2)
}
posteriorsample<-data.frame(Beta)
colnames(posteriorsample)<-c("Beta0","Beta1","Beta2","Beta3","Beta4","Beta5","Beta6","Beta7","Beta8","Beta9","Beta10","Beta11","Beta12","Beta13","Beta14","Beta15")
posteriorMean<-colMeans(posteriorsample)
posteriorMean<-as.matrix(posteriorMean)
Y_hat<-X_test%*%posteriorMean
plot(Y_hat,y_test)
perror<-(1/length(y_test))*sum((y_test-Y_hat)^2)
print(perror)
